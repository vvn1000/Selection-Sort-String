

// ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩
// DO NOT ALTER THE TEXT BETWEEN THESE LINES =========={M{E{R{L{I{N{1}N}I}L}R}E}M}=====================================
let unsortedIntegers = [5, 1, 4, 2, 8]
// DO NOT ALTER THE TEXT BETWEEN THESE LINES =========={M{E{R{L{I{N{1}N}I}L}R}E}M}=====================================
// ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧


// Add your code below:

func swap(integers: inout[Int], firstIndex: Int, secondIndex: Int) {
    let temp = integers[firstIndex]
    integers[firstIndex] = integers[secondIndex]
    integers[secondIndex] = temp
}

var totalSwaps = 0
var swaps = 0
var passes = 0
var unsortedArray = unsortedIntegers
print("Pass: \(passes), Swaps: \(swaps)/\(totalSwaps), Array: \(unsortedArray)")


for i in 0..<unsortedArray.count - 1 {
    var j = i
    var least = unsortedArray[i]
    for k in i..<unsortedArray.count {
        if (unsortedArray[k] < least) {
            least = unsortedArray[k]
            j = k
        }
    }
    passes += 1
    totalSwaps += 1
    swaps = 1
    if (unsortedArray[j] < unsortedArray[i]) {
        swap(integers:&unsortedArray, firstIndex:j, secondIndex:i)
    }
    print("Pass: \(passes), Swaps: \(swaps)/\(totalSwaps), Array: \(unsortedArray)")
}




 /*       
        while (unsortedArray[least] < unsortedArray[i]) {
            
            if swaps == 0 {
                break
            }
            }
            
  */
